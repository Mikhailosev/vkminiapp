{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { isWebView } from '../../lib/webview';\n\nvar ConfigProvider =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ConfigProvider, _React$Component);\n\n  function ConfigProvider(props, context) {\n    var _this;\n\n    _classCallCheck(this, ConfigProvider);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ConfigProvider).call(this, props));\n    (context.document || window.document).body.setAttribute('scheme', props.scheme);\n    return _this;\n  }\n\n  _createClass(ConfigProvider, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.scheme !== this.props.scheme) {\n        this.document.body.setAttribute('scheme', this.props.scheme);\n      }\n    }\n  }, {\n    key: \"getChildContext\",\n    value: function getChildContext() {\n      return {\n        isWebView: this.props.isWebView,\n        webviewType: this.props.webviewType,\n        scheme: this.props.scheme,\n        app: this.props.app\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this.props.children;\n    }\n  }, {\n    key: \"document\",\n    get: function get() {\n      return this.context.document || window.document;\n    }\n  }]);\n\n  return ConfigProvider;\n}(React.Component);\n\n_defineProperty(ConfigProvider, \"childContextTypes\", {\n  isWebView: PropTypes.bool,\n  scheme: PropTypes.string,\n  webviewType: PropTypes.oneOf(['vkapps', 'internal']),\n  app: PropTypes.string\n});\n\n_defineProperty(ConfigProvider, \"propTypes\", {\n  scheme: PropTypes.string,\n  isWebView: PropTypes.bool,\n  webviewType: PropTypes.oneOf(['vkapps', 'internal']),\n  app: PropTypes.string,\n  children: PropTypes.node\n});\n\n_defineProperty(ConfigProvider, \"defaultProps\", {\n  webviewType: 'internal',\n  isWebView: isWebView,\n  scheme: 'client_light'\n});\n\n_defineProperty(ConfigProvider, \"contextTypes\", {\n  document: PropTypes.object\n});\n\nexport { ConfigProvider as default };","map":null,"metadata":{},"sourceType":"module"}