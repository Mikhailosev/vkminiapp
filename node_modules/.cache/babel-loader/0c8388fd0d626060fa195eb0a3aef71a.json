{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../lib/classNames';\nimport getClassName from '../../helpers/getClassName';\nimport Tappable from '../Tappable/Tappable';\nimport Touch from '../Touch/Touch';\nimport { IS_PLATFORM_IOS, IS_PLATFORM_ANDROID } from '../../lib/platform';\nimport Icon24Chevron from '@vkontakte/icons/dist/24/chevron';\nimport Icon16Done from '@vkontakte/icons/dist/16/done';\nimport Icon24Cancel from '@vkontakte/icons/dist/24/cancel';\nimport Icon24Reorder from '@vkontakte/icons/dist/24/reorder';\nimport Icon24ReorderIos from '@vkontakte/icons/dist/24/reorder_ios';\nvar baseClassNames = getClassName('Cell');\n\nvar Cell =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Cell, _Component);\n\n  function Cell() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Cell);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Cell)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      isRemoveActivated: false,\n      removeOffset: 0,\n      dragging: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onClick\", function (e) {\n      var _this$props = _this.props,\n          removable = _this$props.removable,\n          onClick = _this$props.onClick;\n\n      if (e.target.tagName.toLowerCase() === 'input') {\n        e.stopPropagation();\n      } else if (removable) {\n        return null;\n      } else {\n        onClick && onClick(e);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"activateRemove\", function () {\n      _this.setState({\n        isRemoveActivated: true\n      });\n\n      _this.document.addEventListener('click', _this.deactivateRemove);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"deactivateRemove\", function () {\n      _this.setState({\n        isRemoveActivated: false,\n        removeOffset: 0\n      });\n\n      _this.document.removeEventListener('click', _this.deactivateRemove);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onRemoveClick\", function (e) {\n      e.nativeEvent.stopImmediatePropagation();\n      e.preventDefault();\n      _this.props.onRemove && _this.props.onRemove(e, _this.rootEl);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getRemoveRef\", function (el) {\n      return _this.removeButton = el;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getRootRef\", function (element) {\n      _this.rootEl = element;\n      var getRootRef = _this.props.getRootRef;\n\n      if (getRootRef) {\n        if (typeof getRootRef === 'function') {\n          getRootRef(element);\n        } else {\n          getRootRef.current = element;\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDragStart\", function () {\n      _this.setState({\n        dragging: true\n      });\n\n      _this.dragShift = 0;\n      _this.listEl = _this.rootEl.closest('.List');\n      _this.listEl && _this.listEl.classList.add('List--dragging');\n      _this.siblings = Array.prototype.slice.call(_this.rootEl.parentElement.childNodes);\n      _this.dragStartIndex = _this.siblings.indexOf(_this.rootEl);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDragMove\", function (e) {\n      e.originalEvent.preventDefault();\n      if (_this.state.removeOffset) return;\n      _this.rootEl.style.transform = \"translateY(\".concat(e.shiftY, \"px)\");\n\n      var rootGesture = _this.rootEl.getBoundingClientRect();\n\n      _this.dragDirection = _this.dragShift - e.shiftY < 0 ? 'down' : 'up';\n      _this.dragShift = e.shiftY;\n      _this.dragEndIndex = _this.dragStartIndex;\n\n      _this.siblings.forEach(function (sibling, siblingIndex) {\n        var siblingGesture = sibling.getBoundingClientRect();\n\n        if (_this.dragStartIndex < siblingIndex) {\n          if (rootGesture.bottom > siblingGesture.top + siblingGesture.height / 2) {\n            if (_this.dragDirection === 'down') sibling.style.transform = \"translateY(-100%)\";\n            _this.dragEndIndex++;\n          }\n\n          if (rootGesture.top < siblingGesture.bottom - siblingGesture.height / 2 && _this.dragDirection === 'up') {\n            sibling.style.transform = \"translateY(0)\";\n          }\n        } else if (_this.dragStartIndex > siblingIndex) {\n          if (rootGesture.top < siblingGesture.bottom - siblingGesture.height / 2) {\n            if (_this.dragDirection === 'up') sibling.style.transform = \"translateY(100%)\";\n            _this.dragEndIndex--;\n          }\n\n          if (rootGesture.bottom > siblingGesture.top + siblingGesture.height / 2 && _this.dragDirection === 'down') {\n            sibling.style.transform = \"translateY(0)\";\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDragEnd\", function () {\n      _this.setState({\n        dragging: false\n      });\n\n      _this.listEl && _this.listEl.classList.remove('List--dragging');\n      _this.props.onDragFinish && _this.props.onDragFinish({\n        from: _this.dragStartIndex,\n        to: _this.dragEndIndex\n      });\n\n      _this.siblings.forEach(function (sibling) {\n        return sibling.style.transform = null;\n      });\n\n      delete _this.dragShift;\n      delete _this.listEl;\n      delete _this.siblings;\n      delete _this.dragStartIndex;\n      delete _this.dragEndIndex;\n      delete _this.dragDirection;\n    });\n\n    return _this;\n  }\n\n  _createClass(Cell, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.document.removeEventListener('click', this.deactivateRemove);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (prevState.isRemoveActivated !== this.state.isRemoveActivated && this.state.isRemoveActivated) {\n        this.setState({\n          removeOffset: this.removeButton.offsetWidth\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _classNames;\n\n      var _this$props2 = this.props,\n          before = _this$props2.before,\n          indicator = _this$props2.indicator,\n          asideContent = _this$props2.asideContent,\n          expandable = _this$props2.expandable,\n          onClick = _this$props2.onClick,\n          children = _this$props2.children,\n          getRootRef = _this$props2.getRootRef,\n          description = _this$props2.description,\n          selectable = _this$props2.selectable,\n          multiline = _this$props2.multiline,\n          className = _this$props2.className,\n          onRemove = _this$props2.onRemove,\n          removable = _this$props2.removable,\n          removePlaceholder = _this$props2.removePlaceholder,\n          draggable = _this$props2.draggable,\n          onDragFinish = _this$props2.onDragFinish,\n          href = _this$props2.href,\n          size = _this$props2.size,\n          bottomContent = _this$props2.bottomContent,\n          restProps = _objectWithoutProperties(_this$props2, [\"before\", \"indicator\", \"asideContent\", \"expandable\", \"onClick\", \"children\", \"getRootRef\", \"description\", \"selectable\", \"multiline\", \"className\", \"onRemove\", \"removable\", \"removePlaceholder\", \"draggable\", \"onDragFinish\", \"href\", \"size\", \"bottomContent\"]);\n\n      selectable = selectable && !draggable;\n      var rootProps = selectable ? {} : restProps;\n      var inputProps = selectable ? restProps : {};\n      var linkProps = href ? restProps : {};\n      return React.createElement(\"div\", _extends({}, rootProps, {\n        onClick: href || draggable ? null : this.onClick,\n        className: classNames(baseClassNames, (_classNames = {\n          'Cell--expandable': expandable,\n          'Cell--multiline': multiline\n        }, _defineProperty(_classNames, \"Cell--\".concat(size), size), _defineProperty(_classNames, 'Cell--dragging', this.state.dragging), _defineProperty(_classNames, 'Cell--draggable', draggable), _classNames), className),\n        ref: this.getRootRef\n      }), React.createElement(Tappable, _extends({}, linkProps, {\n        onClick: href ? this.onClick : null,\n        component: selectable ? 'label' : href ? 'a' : 'div',\n        className: \"Cell__in\",\n        href: href,\n        disabled: !selectable && !onClick && !href || removable || draggable,\n        style: removable ? {\n          transform: \"translateX(-\".concat(this.state.removeOffset, \"px)\")\n        } : null\n      }), selectable && React.createElement(\"input\", _extends({}, inputProps, {\n        type: \"checkbox\",\n        className: \"Cell__checkbox\"\n      })), React.createElement(\"div\", {\n        className: \"Cell__before\"\n      }, selectable && IS_PLATFORM_IOS && React.createElement(\"div\", {\n        className: \"Cell__checkbox-marker\"\n      }, React.createElement(Icon16Done, null)), removable && IS_PLATFORM_IOS && React.createElement(\"div\", {\n        className: \"Cell__remove-marker\",\n        onClick: this.activateRemove\n      }), IS_PLATFORM_ANDROID && draggable && React.createElement(Touch, {\n        onStart: this.onDragStart,\n        onMoveY: this.onDragMove,\n        onEnd: this.onDragEnd,\n        className: \"Cell__dragger\"\n      }, React.createElement(Icon24Reorder, null)), before && React.createElement(\"div\", {\n        className: \"Cell__before-in\"\n      }, before)), React.createElement(\"div\", {\n        className: \"Cell__main\"\n      }, React.createElement(\"div\", {\n        className: \"Cell__children\"\n      }, children), description && React.createElement(\"div\", {\n        className: \"Cell__description\"\n      }, description), size === 'l' && bottomContent && React.createElement(\"div\", {\n        className: \"Cell__bottom\"\n      }, bottomContent)), React.createElement(\"div\", {\n        className: \"Cell__indicator\"\n      }, indicator), React.createElement(\"div\", {\n        className: \"Cell__aside\"\n      }, asideContent, selectable && IS_PLATFORM_ANDROID && React.createElement(\"div\", {\n        className: \"Cell__checkbox-marker\"\n      }, React.createElement(Icon16Done, null)), removable && IS_PLATFORM_ANDROID && React.createElement(\"div\", {\n        className: \"Cell__remove-marker\",\n        onClick: this.onRemoveClick\n      }, React.createElement(Icon24Cancel, null)), IS_PLATFORM_IOS && expandable && !draggable && React.createElement(Icon24Chevron, {\n        className: \"Cell__chevron\"\n      }), IS_PLATFORM_IOS && draggable && React.createElement(Touch, {\n        className: \"Cell__dragger\",\n        onStart: this.onDragStart,\n        onMoveY: this.onDragMove,\n        onEnd: this.onDragEnd\n      }, React.createElement(Icon24ReorderIos, null)))), removable && IS_PLATFORM_IOS && React.createElement(\"div\", {\n        ref: this.getRemoveRef,\n        className: \"Cell__remove\",\n        onClick: this.onRemoveClick,\n        style: removable ? {\n          transform: \"translateX(-\".concat(this.state.removeOffset, \"px)\")\n        } : null\n      }, React.createElement(\"span\", {\n        className: \"Cell__remove-in\"\n      }, removePlaceholder)));\n    }\n  }, {\n    key: \"document\",\n    get: function get() {\n      return this.context.document || document;\n    }\n    /**\n     * предотвращает двойное срабатывание в случае с input\n     * (https://github.com/vuejs/vue/issues/3699#issuecomment-247957931)\n     * предотвращает клик в случае, когда включен режим removable\n     * @param e\n     */\n\n  }]);\n\n  return Cell;\n}(Component);\n\n_defineProperty(Cell, \"propTypes\", {\n  /**\n   * Контейнер для контента от `children`.\n   */\n  before: PropTypes.node,\n\n  /**\n   * Контейнер для текста справа от `children`.\n   */\n  indicator: PropTypes.node,\n\n  /**\n   * Контейнер для контента справа от `children` и `indicator`.\n   */\n  asideContent: PropTypes.node,\n\n  /**\n   * Выставляйте этот флаг, если клик по ячейке вызывает переход на другую панель. Флаг нужен для корректной\n   * стилизации такой ячейки.\n   */\n  expandable: PropTypes.bool,\n  children: PropTypes.node,\n  onClick: PropTypes.func,\n\n  /**\n   * Добавляет возможность переноса содержимого `children` и `description`. Без этого флага текст будет уходить\n   * в троеточие.\n   */\n  multiline: PropTypes.bool,\n\n  /**\n   * Контейнер для дополнительного содержимого под `children`.\n   */\n  description: PropTypes.node,\n  getRootRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.any\n  })]),\n\n  /**\n   * Контейнер для произвольного содержимого под `description`. Рисуется только если передать `size=\"l\"`.\n   */\n  bottomContent: PropTypes.node,\n  className: PropTypes.string,\n  style: PropTypes.object,\n\n  /**\n   * Размер влияет на выравнивание блоков по вертикали, вид сепаратора (iOS) и возможность вставлять `bottomContent`.\n   */\n  size: PropTypes.oneOf(['m', 'l']),\n\n  /**\n   * Флаг для перехода в режим ячеек-чекбоксов.\n   * **Важно:** в этом режиме обработчик `onClick` вызываться не будет.\n   * **Важно:** этот режим несовместим с `draggable`. В случае истинности двух этих флагов, приоритет отдается\n   * `draggable`.\n   */\n  selectable: PropTypes.bool,\n\n  /**\n   * Флаг для перехода в режим удаляемых ячеек. **Важно:** в этом режиме обработчик `onClick` вызываться не будет.\n   */\n  removable: PropTypes.bool,\n\n  /**\n   * Коллбэк срабатывает при клике на контрол удаления.\n   */\n  onRemove: PropTypes.func,\n\n  /**\n   * iOS only. Текст в выезжаеющей кнопке для удаления ячейки.\n   */\n  removePlaceholder: PropTypes.node,\n\n  /**\n   * Флаг для перехода в режим перетаскивания. **Важно:** в этом режиме обработчик `onClick` вызываться не будет.\n   */\n  draggable: PropTypes.bool,\n\n  /**\n   * Коллбэк срабатывает при завершении перетаскивания.\n   * **Важно:** режим перетаскивания не меняет порядок ячеек в DOM. В коллбэке есть объект с полями `from` и `to`.\n   * Эти числа нужны для того, чтобы разработчик понимал, с какого индекса на какой произошел переход. В песочнице\n   * есть рабочий пример с обработкой этих чисел и перерисовкой списка.\n   */\n  onDragFinish: PropTypes.func,\n\n  /**\n   * При передаче `href`, ячейка становится полноценной ссылкой. Поддерживаются все валидные для этого элемента\n   * атрибуты (`target`, `rel` и т.д.).\n   */\n  href: PropTypes.string\n});\n\n_defineProperty(Cell, \"defaultProps\", {\n  before: null,\n  indicator: '',\n  asideContent: '',\n  bottomContent: null,\n  expandable: false,\n  children: '',\n  selectable: false,\n  multiline: false,\n  removable: false,\n  size: 'm',\n  removePlaceholder: 'Удалить'\n});\n\n_defineProperty(Cell, \"contextTypes\", {\n  document: PropTypes.any\n});\n\nexport { Cell as default };","map":null,"metadata":{},"sourceType":"module"}