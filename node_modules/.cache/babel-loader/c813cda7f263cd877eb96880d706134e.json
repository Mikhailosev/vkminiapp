{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport querystring from './querystring';\nvar defaultOptions = {\n  method: 'GET',\n  data: null\n};\n\nfunction getXMLHttpRequest() {\n  if (typeof XMLHttpRequest !== 'undefined') {\n    // eslint-disable-next-line\n    return new XMLHttpRequest();\n  }\n}\n\nfunction makeRequest(url, options) {\n  var isCanceled;\n  var error = new Error('Request was aborted');\n  var request = getXMLHttpRequest();\n\n  var opts = _objectSpread({}, defaultOptions, options);\n\n  if (opts.data && opts.method.toLowerCase() === 'get') {\n    url += \"?\".concat(querystring.create(opts.data));\n  }\n\n  var requestPromise = new Promise(function (resolve, reject) {\n    if (!request) {\n      reject(new Error('XMLHttpRequest not supported'));\n    }\n\n    if (opts.timeout) {\n      request.timeout = opts.timeout;\n    }\n\n    request.open(opts.method, url, true);\n\n    if (opts.headers) {\n      Object.keys(opts.headers).forEach(function (key) {\n        request.setRequestHeader(key, opts.headers[key]);\n      });\n    }\n\n    request.onreadystatechange = function () {\n      if (request.readyState === 4) {\n        if (request.status === 200) {\n          resolve(request.responseText);\n        } else {\n          reject(new Error(request.status));\n        }\n      }\n    };\n\n    request.ontimeout = function () {\n      reject(new Error('XMLHttpRequest timeout expires'));\n    };\n\n    request.send(opts.data);\n  });\n  return {\n    promise: new Promise(function (resolve, reject) {\n      requestPromise.then(function (res) {\n        return isCanceled ? reject(error) : resolve(res);\n      }).catch(function (e) {\n        return isCanceled ? console.log(error) || reject(error) : reject(e);\n      });\n    }),\n    abort: function abort() {\n      isCanceled = true;\n\n      if (request) {\n        request.abort();\n      }\n    }\n  };\n}\n/**\n * @deprecated будет удален в версии 3.0.0\n */\n\n\nexport default (function (url, options) {\n  return makeRequest(url, options);\n});","map":null,"metadata":{},"sourceType":"module"}