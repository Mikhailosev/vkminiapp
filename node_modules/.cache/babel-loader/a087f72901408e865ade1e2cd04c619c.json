{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '../Button/Button';\nimport HeaderButton from '../HeaderButton/HeaderButton';\nimport getClassName from '../../helpers/getClassName';\nimport classNames from '../../lib/classNames';\nimport withInsets from '../../hoc/withInsets';\nimport Icon24Dismiss from '@vkontakte/icons/dist/24/dismiss';\nimport { IS_PLATFORM_IOS } from '../../lib/platform';\nimport { isNumeric } from '../../lib/utils';\nvar baseClassName = getClassName('ModalCard');\n\nvar ModalCard =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ModalCard, _Component);\n\n  function ModalCard() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ModalCard);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ModalCard)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"onButtonClick\", function (event) {\n      var action = _this.props.actions[event.currentTarget.dataset.index].action;\n      event.persist();\n\n      if (typeof action === 'function') {\n        action(event);\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(ModalCard, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          insets = _this$props.insets,\n          icon = _this$props.icon,\n          title = _this$props.title,\n          caption = _this$props.caption,\n          children = _this$props.children,\n          actions = _this$props.actions,\n          actionsLayout = _this$props.actionsLayout,\n          onClose = _this$props.onClose;\n      return React.createElement(\"div\", {\n        className: classNames(baseClassName)\n      }, React.createElement(\"div\", {\n        className: \"ModalCard__in\"\n      }, React.createElement(\"div\", {\n        className: \"ModalCard__container\",\n        style: isNumeric(insets.bottom) ? {\n          marginBottom: insets.bottom\n        } : null\n      }, icon && React.createElement(\"div\", {\n        className: \"ModalCard__icon\"\n      }, icon), title && React.createElement(\"div\", {\n        className: \"ModalCard__title\"\n      }, title), caption && React.createElement(\"div\", {\n        className: \"ModalCard__caption\"\n      }, caption), children, actions.length > 0 && React.createElement(\"div\", {\n        className: classNames('ModalCard__actions', {\n          'ModalCard__actions--v': actionsLayout === 'vertical'\n        })\n      }, actions.map(function (_ref, i) {\n        var title = _ref.title,\n            type = _ref.type;\n        return React.createElement(Button, {\n          key: i,\n          \"data-index\": i,\n          size: \"xl\",\n          level: type,\n          onClick: _this2.onButtonClick\n        }, title);\n      })), IS_PLATFORM_IOS && React.createElement(HeaderButton, {\n        className: \"ModalCard__dismiss\",\n        onClick: onClose\n      }, React.createElement(Icon24Dismiss, null)))));\n    }\n  }]);\n\n  return ModalCard;\n}(Component);\n\n_defineProperty(ModalCard, \"propTypes\", {\n  /**\n   * Иконка.\n   *\n   * Может быть компонентом иконки, например, `<Icon56MoneyTransferOutline />`, или `<Avatar size={72} src=\"\" />`\n   */\n  icon: PropTypes.node,\n\n  /**\n   * Заголовок карточки\n   */\n  title: PropTypes.string,\n\n  /**\n   * Текст, поясняющий заголовок\n   */\n  caption: PropTypes.string,\n\n  /**\n   * Дополнительное содержимое, например, поле ввода\n   */\n  children: PropTypes.node,\n\n  /**\n   * Список кнопок-действий\n   */\n  actions: PropTypes.arrayOf(PropTypes.shape({\n    title: PropTypes.string,\n    action: PropTypes.func,\n    type: PropTypes.oneOf(['secondary', 'primary'])\n  })),\n\n  /**\n   * Тип отображения кнопок: вертикальный или горизонтальный\n   */\n  actionsLayout: PropTypes.oneOf(['vertical', 'horizontal']),\n\n  /**\n   * Будет вызван при закрытии карточки жестом\n   */\n  onClose: PropTypes.func.isRequired,\n\n  /**\n   * @ignore\n   */\n  insets: PropTypes.object\n});\n\n_defineProperty(ModalCard, \"defaultProps\", {\n  actions: [],\n  actionsLayout: 'horizontal',\n  insets: {}\n});\n\nexport default withInsets(ModalCard);","map":null,"metadata":{},"sourceType":"module"}