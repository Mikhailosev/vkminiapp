import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import Tappable from '../Tappable/Tappable';
import PopoutWrapper from '../PopoutWrapper/PopoutWrapper';
import getClassName from '../../helpers/getClassName';
import classNames from '../../lib/classNames';
import transitionEvents from '../../lib/transitionEvents';
import { IS_PLATFORM_ANDROID } from '../../lib/platform';
var baseClassNames = getClassName('Alert');

var Alert =
/*#__PURE__*/
function (_Component) {
  _inherits(Alert, _Component);

  function Alert() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Alert);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Alert)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "state", {});

    _defineProperty(_assertThisInitialized(_this), "element", React.createRef());

    _defineProperty(_assertThisInitialized(_this), "onItemClick", function (item) {
      return function () {
        var action = item.action,
            autoclose = item.autoclose;

        if (autoclose) {
          _this.setState({
            closing: true
          });

          _this.waitTransitionFinish(function () {
            autoclose && _this.props.onClose();
            action && action();
          });
        } else {
          action && action();
        }
      };
    });

    _defineProperty(_assertThisInitialized(_this), "onClose", function () {
      _this.setState({
        closing: true
      });

      _this.waitTransitionFinish(function () {
        _this.props.onClose();
      });
    });

    _defineProperty(_assertThisInitialized(_this), "stopPropagation", function (e) {
      return e.stopPropagation();
    });

    return _this;
  }

  _createClass(Alert, [{
    key: "waitTransitionFinish",
    value: function waitTransitionFinish(eventHandler) {
      if (transitionEvents.supported) {
        var eventName = transitionEvents.prefix ? transitionEvents.prefix + 'TransitionEnd' : 'transitionend';
        this.element.current.removeEventListener(eventName, eventHandler);
        this.element.current.addEventListener(eventName, eventHandler);
      } else {
        setTimeout(eventHandler.bind(this), IS_PLATFORM_ANDROID ? 200 : 300);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          actions = _this$props.actions,
          actionsLayout = _this$props.actionsLayout,
          children = _this$props.children,
          className = _this$props.className,
          style = _this$props.style,
          restProps = _objectWithoutProperties(_this$props, ["actions", "actionsLayout", "children", "className", "style"]);

      var closing = this.state.closing;
      return React.createElement(PopoutWrapper, {
        className: className,
        closing: closing,
        style: style,
        onClick: this.onClose
      }, React.createElement("div", _extends({}, restProps, {
        ref: this.element,
        onClick: this.stopPropagation,
        className: classNames(baseClassNames, {
          'Alert--v': actionsLayout === 'vertical',
          'Alert--h': actionsLayout === 'horizontal',
          'Alert--closing': closing
        })
      }), React.createElement("div", {
        className: "Alert__content"
      }, children), React.createElement("footer", {
        className: "Alert__footer"
      }, actions.map(function (button, i) {
        return React.createElement(Tappable, {
          component: "button",
          className: classNames('Alert__btn', _defineProperty({}, "Alert__btn--".concat(button.style), button.style)),
          onClick: _this2.onItemClick(button),
          key: "alert-action-".concat(i)
        }, React.createElement("span", {
          dangerouslySetInnerHTML: {
            __html: button.title
          }
        }));
      }))));
    }
  }]);

  return Alert;
}(Component);

_defineProperty(Alert, "propTypes", {
  style: PropTypes.object,
  className: PropTypes.string,
  children: PropTypes.node,
  actionsLayout: PropTypes.oneOf(['vertical', 'horizontal']),
  actions: PropTypes.arrayOf(PropTypes.shape({
    title: PropTypes.string,
    action: PropTypes.func,

    /**
     * 'cancel' - iOS only
     */
    style: PropTypes.oneOf(['cancel', 'destructive', 'default'])
  })),
  onClose: PropTypes.func.isRequired
});

_defineProperty(Alert, "defaultProps", {
  actionsLayout: 'horizontal',
  actions: []
});

export { Alert as default };
//# sourceMappingURL=Alert.js.map